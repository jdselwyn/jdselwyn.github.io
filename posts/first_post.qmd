---
title: 'Differences in Fishery Survey Methods'
date: '2023-06-15'
categories: ['Testing', 'Fisheries', 'T-Test', 'Bootstrap', 'Bayesian']
description: "Testing Quarto features with a simple dataset"
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---


I'm mostly testing out Quarto features and seeing how things render based on [this tutorial](https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html). For some example data/something to work with I'm using this [reddit post](https://www.reddit.com/r/AskStatistics/comments/fgkm5m/compare_significance_of_two_fisheries_by_day_of) comparing estimated catch per unit effort ([CPUE](https://en.wikipedia.org/wiki/Catch_per_unit_effort)) of a target fishery based on two different survey techniques. The provided data is the mean daily CPUE for each day of the week for each survey type. We'll assume these techniques were conducted in parallel and treat this as paired data with the goal Census and Roving methods to estimate the same "true" CPUE on a given day. As such we'll use a paired T-Test for the analysis and do the same analysis three different ways.

1. Paired T-Test
2. Bootstrap
3. Bayesian

First we'll load the libraries we want to use for the analysis 
```{r, Libraries, warning=FALSE}
library(tidyverse)
library(magrittr)
library(broom)
library(cmdstanr)
library(patchwork)
```

Next create the dataframe in the format from the post and then convert to a generally more R friendly tidy format.
```{r Create\ Data}
#| code-fold: show
the_data <- tibble(day = factor(c("Saturday", "Sunday", "Monday", "Tuesday", 
                                  "Wednesday", "Thursday", "Friday"),
                                levels = c("Sunday", "Monday", "Tuesday", 
                                           "Wednesday", "Thursday", "Friday",
                                           "Saturday")), 
                   census_mean_cpue = c(1.156, 0.165, 0.766, 1.345, 1.010, 1.221, 0.98),
                   roving_mean_cpue = c(0.217457, 0.113493, 0, 0.195091, 0.208608, 0.25817, 0.119578))

long_data <- the_data %>%
  pivot_longer(cols = ends_with('cpue'),
               names_to = 'survey_method',
               values_to = 'cpue') %>%
  mutate(survey_method = str_extract(survey_method, 'census|roving'),
         survey_method = str_to_sentence(survey_method))
```

Lets see what we're looking at!
```{r Plot\ Data}
long_data %>%
  ggplot(aes(x = survey_method, y = cpue, colour = day)) +
  geom_jitter(width = 0.25) +
  labs(title = 'Surveying Fisheries',
       subtitle = 'Estimated catch varies by survey type',
       caption = 'Source: https://www.reddit.com/r/AskStatistics/comments/fgkm5m\nDate: 10-March-2020',
       x = 'Survey Method',
       y = 'Catch per Unit Effort (CPUE)',
       colour = 'Day of Week') + 
  scale_color_brewer(palette = "Dark2") +
  guides(colour = guide_legend(override.aes = list(size = 4))) +
  theme_classic() +
  theme(axis.text = element_text(colour = 'black', size = 12),
        axis.title = element_text(colour = 'black', size = 18),
        plot.title = element_text(colour = 'black', size = 20),
        plot.subtitle = element_text(colour = 'black', size = 16),
        panel.border = element_rect(colour = 'black', fill = 'transparent'),
        legend.text = element_text(colour = 'black', size = 12),
        legend.title = element_text(colour = 'black', size = 18))
```
It looks like there is probably a fairly large difference between the census method and the roving method in estimating the CPUE on any given day.

Now that we have the data setup and have looked at the raw data lets analyze it to see if the difference we observe is statistically significant. First we'll use one of the first tests learned in most statistics classes, a (paired) T-Test.

```{r Paired\ T-Test}
#| code-fold: show
the_t_test <- with(the_data, t.test(census_mean_cpue, roving_mean_cpue, paired = TRUE))

the_t_test
```

It looks like there is a significant (p = 0.00098) difference between the estimates reported for the two survey methods. The average difference in CPUE between the two methods is ~0.79 CPUE. One thing that I like to include in plots is confidence intervals of various plotted means. Since we want to plot the mean CPUE from each survey method we'll calculate those intervals using a mirrored method to how we test if there is a significant difference (eg. here with two T based confidence intervals).

```{r T\ Confidence\ Intervals}
method_T <- long_data %>%
  nest(data = -survey_method) %>%
  mutate(t_test = map(data, ~t.test(.x$cpue)),
         t_test = map(t_test, tidy)) %>%
  select(-data) %>%
  unnest(t_test)
```

Now we can finally plot the results and visualize the difference in survey methodology.

```{r Plot\ T-Test}
annotation_t_results <- the_t_test %>%
  tidy() %$%
  str_c('atop(t','[(', parameter, ')]', ' == ', round(statistic, 3), ', p == ', round(p.value, 3),')', sep = '')

t_plot <- long_data %>%
  ggplot(aes(x = survey_method)) +
  geom_line(aes(y = cpue, group = day, colour = day), linewidth = 0.5) +
  
  geom_errorbar(data = method_T, aes(ymin = conf.low, ymax = conf.high), 
                 linetype = 'solid', size = 1, width = 0.05) +
  geom_point(data = method_T, aes(y = estimate), size = 3) +
  
  annotate("text", x = 2, y = Inf, vjust = 1.5, 
           label = annotation_t_results, parse = TRUE, size = 4) +
  labs(title = 'Surveying Fisheries',
       subtitle = 'Estimated catch varies by survey type',
       caption = 'Source: https://www.reddit.com/r/AskStatistics/comments/fgkm5m\nDate: 10-March-2020\nAnalysis: Paired T-Test\nIntervals: T-Test 95%',
       x = 'Survey Method',
       y = 'Catch per Unit Effort (CPUE)',
       colour = 'Day of Week') + 
  scale_color_brewer(palette = "Dark2") +
  guides(colour = guide_legend(override.aes = list(linewidth = 4))) +
  theme_classic() +
  theme(axis.text = element_text(colour = 'black', size = 12),
        axis.title = element_text(colour = 'black', size = 18),
        plot.title = element_text(colour = 'black', size = 20),
        plot.subtitle = element_text(colour = 'black', size = 16),
        panel.border = element_rect(colour = 'black', fill = 'transparent'),
        legend.text = element_text(colour = 'black', size = 12),
        legend.title = element_text(colour = 'black', size = 18))
t_plot
```


Now lets repeat that analysis using a bootstrap appraoch to see if there is evidence of significant differences.
```{r Paired\ Bootstrap, echo=TRUE}
#| code-fold: show
paired_boot <- function(){
  the_data[sample(7, replace = TRUE),] %>%
    summarise(mean_diff = mean(census_mean_cpue - roving_mean_cpue)) %>%
    pull(mean_diff)
}
boot_diffs <- replicate(1000, paired_boot())

```


```{r Bootstrap\ Confidence\ Intervals, echo=TRUE}
method_boot <- long_data %>%
  nest(data = -survey_method) %>%
  mutate(boot = map(data, ~replicate(1000, mean(sample(.x$cpue, nrow(.x), replace = TRUE))))) %>%
  mutate(estimate = map_dbl(boot, mean),
         conf.low = map_dbl(boot, quantile, 0.025),
         conf.high = map_dbl(boot, quantile, 0.975))
```

```{r Plot\ Bootstrap}
annotation_boot_results <- str_c('Census - Roving CPUE: ', 
                                 round(mean(boot_diffs), 3), '\n(95% CI: ',
      str_c(round(quantile(boot_diffs, c(0.025, 0.975)), 3), collapse = '-'),
      ')')

boot_plot <- long_data %>%
  ggplot(aes(x = survey_method)) +
  geom_line(aes(y = cpue, group = day, colour = day), linewidth = 0.5) + #, colour = 'gray60'
  # geom_point(aes(y = count), size = 1, colour = 'gray60') +
  
  geom_errorbar(data = method_boot, aes(ymin = conf.low, ymax = conf.high), 
                 linetype = 'solid', size = 1, width = 0.05) +
  geom_point(data = method_boot, aes(y = estimate), size = 3) +
  
  annotate("text", x = 2, y = Inf, vjust = 1.5, 
           label = annotation_boot_results, parse = FALSE, size = 3) +
  labs(title = 'Surveying Fisheries',
       subtitle = 'Estimated catch varies by survey type',
       caption = 'Source: https://www.reddit.com/r/AskStatistics/comments/fgkm5m\nDate: 10-March-2020\nAnalysis: Paired Bootstrap\nIntervals: Bootstrap 95%',
       x = 'Survey Method',
       y = 'Catch per Unit Effort (CPUE)',
       colour = 'Day of Week') + 
  scale_color_brewer(palette = "Dark2") +
  guides(colour = guide_legend(override.aes = list(linewidth = 4))) +
  theme_classic() +
  theme(axis.text = element_text(colour = 'black', size = 12),
        axis.title = element_text(colour = 'black', size = 18),
        plot.title = element_text(colour = 'black', size = 20),
        plot.subtitle = element_text(colour = 'black', size = 16),
        panel.border = element_rect(colour = 'black', fill = 'transparent'),
        legend.text = element_text(colour = 'black', size = 12),
        legend.title = element_text(colour = 'black', size = 18))
boot_plot
```

Finally, lets use a Bayesian method. And because I want to practice coding in STAN we'll use that and run it with cmdstanr.
```{r Bayesian\ Model, echo=TRUE, results = FALSE}
#| code-fold: show
bayes_model <- cmdstan_model('survey_method_analysis.stan')

bayes_fit <- bayes_model$sample(
  step_size = 0.1, #add because of errors in warmup sampling sigma priors
  #https://discourse.mc-stan.org/t/scale-parameter-is-0-but-must-be-0-can-i-do-anything-to-deal-with-this/19453/5
  data = list(N = nrow(the_data),
              cpue_census = the_data$census_mean_cpue,
              cpue_roving = the_data$roving_mean_cpue,
              mean_priors = c(0, 1)), 
  chains = 4, 
  parallel_chains = 4,
  refresh = 0)
```

```{r Bayesian\ Output}
bayes_out <- posterior::summarise_draws(bayes_fit, 
                                        mean, ~quantile(.x, probs = c(0.025, 0.975)))

method_bayes <- bayes_out %>%
  filter(str_detect(variable, 'mu'),
         str_detect(variable, 'census|roving')) %>%
  mutate(survey_method = str_extract(variable, 'census|roving') %>%
           str_to_title) %>%
  rename(estimate = mean,
         conf.low = `2.5%`,
         conf.high = `97.5%`)
```


```{r Plot\ Bayesian\ Model}
annotation_bayes_results <- str_c('Census - Roving CPUE: ', 
                                 round(bayes_out$mean[6], 3), '\n(95% CI: ',
      str_c(round(c(bayes_out$`2.5%`[6], bayes_out$`97.5%`[6]), 3), collapse = '-'),
      ')')

bayes_plot <- long_data %>%
  ggplot(aes(x = survey_method)) +
  geom_line(aes(y = cpue, group = day, colour = day), linewidth = 0.5) + #, colour = 'gray60'
  # geom_point(aes(y = count), size = 1, colour = 'gray60') +
  
  geom_errorbar(data = method_bayes, aes(ymin = conf.low, ymax = conf.high), 
                 linetype = 'solid', size = 1, width = 0.05) +
  geom_point(data = method_bayes, aes(y = estimate), size = 3) +
  
  annotate("text", x = 2, y = Inf, vjust = 1.5, 
           label = annotation_bayes_results, parse = FALSE, size = 3) +
  labs(title = 'Surveying Fisheries',
       subtitle = 'Estimated catch varies by survey type',
       caption = 'Source: https://www.reddit.com/r/AskStatistics/comments/fgkm5m\nDate: 10-March-2020\nAnalysis: Bayesian Model\nIntervals: Bayesian 95%',
       x = 'Survey Method',
       y = 'Catch per Unit Effort (CPUE)',
       colour = 'Day of Week') + 
  scale_color_brewer(palette = "Dark2") +
  guides(colour = guide_legend(override.aes = list(linewidth = 4))) +
  theme_classic() +
  theme(axis.text = element_text(colour = 'black', size = 12),
        axis.title = element_text(colour = 'black', size = 18),
        plot.title = element_text(colour = 'black', size = 20),
        plot.subtitle = element_text(colour = 'black', size = 16),
        panel.border = element_rect(colour = 'black', fill = 'transparent'),
        legend.text = element_text(colour = 'black', size = 12),
        legend.title = element_text(colour = 'black', size = 18))
bayes_plot
```



Now we'll put all the plots together into one figure
```{r All\ Plots}
(t_plot + 
   labs(caption = 'Analysis: Paired T-Test\nIntervals: T-Test 95%') +
   theme(plot.title = element_blank(),
         plot.subtitle = element_blank())) + 
  
  (boot_plot + 
     labs(caption = 'Analysis: Paired Bootstrap\nIntervals: Bootstrap 95%') +
     theme(plot.title = element_blank(),
         plot.subtitle = element_blank(),
         axis.title.y = element_blank())) + 
  
  (bayes_plot + 
     labs(caption = 'Analysis: Bayesian Model\nIntervals: Bayesian 95%') +
     theme(plot.title = element_blank(),
         plot.subtitle = element_blank(),
         axis.title.y = element_blank())) + 
  
  plot_layout(guides = 'collect', nrow = 1) +
  plot_annotation(title = 'Surveying Fisheries',
       subtitle = 'Estimated catch varies by survey type',
       caption = 'Source: https://www.reddit.com/r/AskStatistics/comments/fgkm5m\nDate: 10-March-2020',
       theme = theme(plot.title = element_text(colour = 'black', size = 20),
        plot.subtitle = element_text(colour = 'black', size = 16)))
```

